set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'git://github.com/airblade/vim-gitgutter.git'
" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'https://github.com/tpope/vim-fugitive.git' 
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
Plugin 'git://git.wincent.com/command-t.git'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}
Plugin 'flazz/vim-colorschemes'
Plugin 'git://github.com/tpope/vim-surround.git'
Plugin 'https://github.com/scrooloose/nerdtree.git'
Plugin 'https://github.com/Xuyuanp/nerdtree-git-plugin.git'
Plugin 'severin-lemaignan/vim-minimap'
Plugin 'https://github.com/joshdick/onedark.vim.git'
" Plugin 'https://github.com/terryma/vim-multiple-cursors'
Plugin 'https://github.com/Valloric/YouCompleteMe'
" Plugin 'vim-airline/vim-airline'
" Plugin 'vim-airline/vim-airline-themes'
Plugin 'https://github.com/itchyny/lightline.vim'
Plugin 'powerline/powerline', {'rtp': 'powerline/bindings/vim/'}
" Plugin 'https://github.com/nvie/vim-flake8'
" Plugin 'vim-syntastic/syntastic'
Plugin 'Yggdroot/indentLine'
Plugin 'https://github.com/simnalamburt/vim-mundo'
Plugin 'git://github.com/wikitopian/hardmode.git'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'https://github.com/python-mode/python-mode'
Plugin 'davidhalter/jedi-vim'
Plugin 'https://github.com/scrooloose/nerdcommenter'
Plugin 'https://github.com/plytophogy/vim-virtualenv'
Plugin 'https://github.com/jreybert/vimagit'
Plugin 'https://github.com/vim-scripts/taglist.vim'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'https://github.com/ctrlpvim/ctrlp.vim'
Plugin 'ryanoasis/vim-devicons'
Plugin 'https://github.com/terryma/vim-smooth-scroll'
Plugin 'https://github.com/w0rp/ale'
Plugin 'https://github.com/tommcdo/vim-exchange/'
Plugin 'https://github.com/pacha/vem-tabline/'
Plugin 'arcticicestudio/nord-vim'
Plugin 'mgee/lightline-bufferline'
Plugin 'https://github.com/dhruvasagar/vim-vinegar'
Plugin 'JamshedVesuna/vim-markdown-preview'

"Highlight searches while typing
set incsearch

"default to case insensitive search
set ic

"Smooth Scroll
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>

" navigate tabs
map tn :tabnew<Space>
nnoremap tk :tabnext<CR>
nnoremap tj :tabprev<CR>
nnoremap th :tabfirst<CR>
nnoremap tl :tablast<CR>

" Syntastic:
" let g:airline_theme = 'luna'
" let g:airline_theme='onedark'
" let g:lightline = {
"   \ 'colorscheme': 'onedark',
"   \ }
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
let g:airline_inactive_collapse=1
" let g:airline_section_z = airline#section#create(['windowswap', '%3p%% ', 'linenr', ':%3v'])
let g:airline_section_b = '%-0.10{getcwd()}'
let g:airline_section_c = '%t'
let g:airline_powerline_fonts = 1
let g:airline_ttimeoutlen = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#enabled = 1

let g:lightline = {
      \ 'colorscheme': 'nord',
      \ }

let g:lightline.tabline          = {'left': [['buffers']], 'right': [['close']]}
let g:lightline.component_expand = {'buffers': 'lightline#bufferline#buffers'}
let g:lightline.component_type   = {'buffers': 'tabsel'}

" Syntastic:
" let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': [],'passive_filetypes': [] }
"
" nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>
"
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
"
" let g:syntastic_always_populate_loc_list = 0
" let g:syntastic_auto_loc_list = 0
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

" Change cursor to blinking in insert mode
" let &t_SI = "\e[6 q"
" let &t_EI = "\e[2 q"

" optional reset cursor on start:
" augroup myCmds
" au!
" autocmd VimEnter * silent !echo -ne "\e[2 q"
" augroup END

" NerdCommenter:
" Toggle comment
map <C-_> <leader>c<space>

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" let g:nerdtree_tabs_smart_startup_focus=1
" map <C-[>n <plug>NERDTreeTabsToggle<CR>
map <C-i> :NERDTreeToggle<CR>
" PythonMode:
let g:pymode_python = 'python3'
let g:pymode_motion = 1
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_cmd = ''
let g:pymode_breakpoint_bind = '<C-b>'
let g:pymode_lint = 0
" Place0 cursor with mouse ndkey -v
set mouse=a

" Copy to system register:
noremap <C-c> "+y

" Hardmode:
" autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>

" Mundo: Enable persistent undo so that undo history persists across vim sessions
set undofile
set undodir=~/.vim/undo
nnoremap <F5> :MundoToggle<CR>

"indentLine
let g:indentLine_enabled = 0
" let g:indentLine_char = '▏'

" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:ycm_min_num_of_chars_for_completion = 99

" VimMarkdownPreview
let vim_markdown_preview_github=1

"python with virtualenv support for YouCompleteMe
"Source https://realpython.com/vim-and-python-a-match-made-in-heaven/

" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Start NERDTree
autocmd VimEnter * NERDTree
" Go to previous (last accessed) window.
autocmd VimEnter * wincmd p
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree
" let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '-'
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "*",
    \ "Staged"    : "+",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }
" enable syntax highlighting

let g:multi_cursor_use_default_mapping=0

" Default mapping
let g:multi_cursor_start_word_key      = '<C-n>'
let g:multi_cursor_select_all_word_key = '<A-n>'
let g:multi_cursor_start_key           = 'g<C-n>'
let g:multi_cursor_select_all_key      = 'g<A-n>'
let g:multi_cursor_next_key            = '<C-n>'
let g:multi_cursor_prev_key            = '<C-p>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'

" Use ctrl-[hjkl] to select the active split!
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>
"
"split navigations
" map <C-J> <C-W><C-J>
" map <C-K> <C-W><C-K>
" map <C-L> <C-W><C-L>
" map <C-H> <C-W><C-H>

" highlight words on search
:set hlsearch
" undo highlight
nmap <C-n> :noh <CR>
filetype off                  " required

syntax enable


" show relative line numbers
set number relativenumber

" Untoggle relative line number when not in window
:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
:  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
:augroup END


" set tabs to have 4 spaces
set ts=4

" indent when moving to the next line while writing code
set autoindent

" expand tabs into spaces
set expandtab

" when using the >> or << commands, shift lines by 4 spaces
set shiftwidth=4

" show a visual line under the cursor's current line
set cursorline

set updatetime=100
" show the matching part of the pair for [] {} and ()
set showmatch

set backspace=indent,eol,start

" enable all Python syntax highlighting features
let python_highlight_all = 1
syntax on

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
set t_Co=256
" colorscheme onedark
colorscheme nord 
set encoding=UTF-8

au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

